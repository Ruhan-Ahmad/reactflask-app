{"version":3,"sources":["myComponent/Show.js","myComponent/Load.js","App.js","reportWebVitals.js","index.js"],"names":["Show","data","useState","d","setd","useEffect","JSON","parse","nam","rollNo","dbmarks","dbgrade","dbgpa","dblab","dblabgrade","dblabgpa","ooadmarks","ooadgrade","ooadgpa","toamarks","toagrade","toagpa","osmarks","osgrade","osgpa","flmarks","flgrade","flgpa","pommarks","pomgrade","pomgpa","Load","value","setvalue","res","e","a","preventDefault","fetch","method","result","json","onSubmit","action","map","dat","i","r","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAIaA,EAAO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAClB,EAAiBC,qBAAjB,mBAAMC,EAAN,KAASC,EAAT,KAKA,OAJAC,qBAAU,WACND,EAAKE,KAAKC,MAAMN,MAClB,IAGE,8BACmB,qBAAPE,EAAoB,OAAQ,mCACpC,kCACA,sCACA,yCACA,0CACA,0CACA,wCACA,8CACA,+CACA,4CACA,4CACA,4CACA,0CACA,2CACA,2CACA,yCACA,0CACA,0CACA,wCACA,0CACA,0CACA,wCACA,2CACA,2CACA,yCACA,+BAAI,6BAAKA,EAAEK,MACX,6BAAKL,EAAEM,SACP,6BAAKN,EAAEO,UACP,6BAAKP,EAAEQ,UACP,6BAAKR,EAAES,QACP,6BAAKT,EAAEU,QACP,6BAAKV,EAAEW,aACP,6BAAKX,EAAEY,WACP,6BAAKZ,EAAEa,YACP,6BAAKb,EAAEc,YACP,6BAAKd,EAAEe,UACP,6BAAKf,EAAEgB,WACP,6BAAKhB,EAAEiB,WACP,6BAAKjB,EAAEkB,SACP,6BAAKlB,EAAEmB,UACP,6BAAKnB,EAAEoB,UACP,6BAAKpB,EAAEqB,QACP,6BAAKrB,EAAEsB,UACP,6BAAKtB,EAAEuB,UACP,6BAAKvB,EAAEwB,QACP,6BAAKxB,EAAEyB,WACP,6BAAKzB,EAAE0B,WACP,6BAAK1B,EAAE2B,oBCvDNC,EAAO,WAChB,MAA0B7B,mBAAS,IAAnC,mBAAO8B,EAAP,KAAcC,EAAd,KACA,EAAqB/B,qBAArB,mBACEgC,GADF,UACK,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACRD,EAAEE,iBADM,SAEWC,MAAM,yCAA0C,CACjEC,OAAQ,SAHF,cAEJC,EAFI,gBAKSA,EAAOC,OALhB,OAKJxC,EALI,OAMRgC,EAAShC,EAAKA,MANN,2CAAH,uDAQP,OACE,8BACE,uBAAMyC,SAAUR,EAAKS,OAAO,IAA5B,UACCX,EAAMY,KAAI,SAACC,EAAKC,GAAN,OACTD,EAAID,KAAI,SAACzC,EAAE4C,GAAH,OACN,cAAC,EAAD,CAAM9C,KAAQE,UAGhB,wBAAQ6C,KAAK,SAAb,6BCZOC,MARf,WACE,OACE,mCACA,cAAC,EAAD,OCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f4cf1b85.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nexport const Show = ({data}) => {\r\n    const[d, setd] = useState()\r\n    useEffect(()=>{\r\n        setd(JSON.parse(data))\r\n    },[])\r\n    \r\n    return (\r\n        <div>\r\n            {typeof(d) === \"undefined\"? \"null\": <>\r\n            <table>\r\n            <th>NAME</th>\r\n            <th>Roll_No</th>\r\n            <th>DB_MARKS</th>\r\n            <th>DB_GRADE</th>\r\n            <th>DB_GPA</th>\r\n            <th>DB_LAB_MARKS</th>\r\n            <th>DB_LAB_GRADDE</th>\r\n            <th>DB_LAB_GPA</th>\r\n            <th>OOAD_MARKS</th>\r\n            <th>OOAD_GRADE</th>\r\n            <th>OOAD_GPA</th>\r\n            <th>TOA_MARKS</th>\r\n            <th>TOA_GRADE</th>\r\n            <th>TOA_GPA</th>\r\n            <th>OS_MARKS</th>\r\n            <th>OS_GRADE</th>\r\n            <th>OS_GPA</th>\r\n            <th>FL_MARKS</th>\r\n            <th>FL-GRADE</th>\r\n            <th>FL-GPA</th>\r\n            <th>POM_MARKS</th>\r\n            <th>POM_GRADE</th>\r\n            <th>POM_GPA</th>\r\n            <tr><td>{d.nam}</td>\r\n            <td>{d.rollNo}</td>\r\n            <td>{d.dbmarks}</td>\r\n            <td>{d.dbgrade}</td>\r\n            <td>{d.dbgpa}</td>\r\n            <td>{d.dblab}</td>\r\n            <td>{d.dblabgrade}</td>\r\n            <td>{d.dblabgpa}</td>\r\n            <td>{d.ooadmarks}</td>\r\n            <td>{d.ooadgrade}</td>\r\n            <td>{d.ooadgpa}</td>\r\n            <td>{d.toamarks}</td>\r\n            <td>{d.toagrade}</td>\r\n            <td>{d.toagpa}</td>\r\n            <td>{d.osmarks}</td>\r\n            <td>{d.osgrade}</td>\r\n            <td>{d.osgpa}</td>\r\n            <td>{d.flmarks}</td>\r\n            <td>{d.flgrade}</td>\r\n            <td>{d.flgpa}</td>\r\n            <td>{d.pommarks}</td>\r\n            <td>{d.pomgrade}</td>\r\n            <td>{d.pomgpa}</td>\r\n            </tr>\r\n            \r\n            </table>\r\n            </>}\r\n        </div>\r\n    )\r\n}\r\n","import {React, useState,useEffect} from 'react'\r\nimport {Show} from \"./Show\"\r\n\r\n\r\nexport const Load = () => {\r\n    const [value, setvalue] = useState([])\r\n    const [dar, setdar]= useState()\r\n  let res = async(e) =>{\r\n    e.preventDefault()\r\n    let result = await fetch('https://fifthsemres.herokuapp.com/show', {\r\n      method: \"POST\"\r\n    })\r\n    let data = await result.json()\r\n    setvalue(data.data)\r\n  }\r\n  return (\r\n    <div> \r\n      <form onSubmit={res} action=\"#\">\r\n      {value.map((dat ,i)=>(\r\n        dat.map((d,r)=>(\r\n          <Show data = {d}/>\r\n        ))\r\n      ))}\r\n        <button type='submit'>SHOW DATA</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport { Load } from './myComponent/Load';\n\nfunction App() {\n  return (\n    <>\n    <Load />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}